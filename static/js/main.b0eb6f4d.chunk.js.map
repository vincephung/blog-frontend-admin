{"version":3,"sources":["components/log-in-form/LoginForm.js","authentication/AuthenticateUser.js","components/postForm/PostForm.js","components/postForm/EditPostForm.js","components/postList/PostDisplay.js","components/postList/PostList.js","components/comments/CommentDisplay.js","components/comments/Comments.js","authentication/GetUser.js","authentication/Logout.js","Nav.js","Error.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","history","useHistory","useState","username","setUsername","password","setPassword","message","error","setError","handleLogin","e","a","preventDefault","fetch","mode","method","headers","body","JSON","stringify","response","json","user","token","localStorage","setItem","push","pathname","window","location","reload","handleChange","target","name","value","className","onSubmit","htmlFor","type","onChange","required","AuthenticateUser","parse","getItem","PostForm","title","setTitle","content","setContent","published","setPublished","image","setImage","errors","setErrors","handleSubmit","Authorization","data","console","log","status","msg","map","err","key","rows","checked","EditPostForm","match","state","lastUpdate","moment","format","url","params","id","handleDelete","onClick","PostDisplay","props","editPost","_id","handlePublish","timestamp","src","alt","postContent","String","PostList","posts","setPosts","useEffect","ok","getPosts","Button","variant","to","post","CommentDisplay","author","Comments","comments","setComments","getComments","comment","GetUser","Logout","removeItem","Nav","Navbar","bg","Brand","Toggle","Collapse","Text","ErrorPage","App","basename","exact","path","component","Error","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.b0eb6f4d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst LoginForm = () => {\n  const history = useHistory();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState({ message: '' });\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n    const url = `https://vincephung-blog.glitch.me/api/log-in`;\n    const response = await fetch(url, {\n      mode: 'cors',\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    });\n\n    const user = await response.json();\n\n    //if user has a token means that login was successful\n    if (user.token) {\n      localStorage.setItem('user', JSON.stringify(user));\n      history.push({\n        pathname: `/home`,\n      });\n      window.location.reload();\n      return;\n    }\n    //if user enters wrong username/password\n    setError(user);\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    name === 'username' ? setUsername(value) : setPassword(value);\n  };\n\n  return (\n    <div className=\"form-container\" onSubmit={handleLogin}>\n      <form className=\"log-in-form\">\n        <p>{error.message}</p>\n        <label htmlFor=\"username\">Username:</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          value={username}\n          onChange={handleChange}\n          required\n        />\n        <label htmlFor=\"password\">Password:</label>\n        <input\n          type=\"text\"\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          required\n        />\n        <button type=\"submit\">Log in</button>\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","const AuthenticateUser = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  //checks if user is logged in and gives them access to stuff\n  if (user && user.token) {\n    return `Bearer ${user.token}`;\n  }\n\n  return {};\n};\n\nexport default AuthenticateUser;\n","import React, { useState } from 'react';\nimport AuthenticateUser from '../../authentication/AuthenticateUser';\nimport { useHistory } from 'react-router-dom';\n\nconst PostForm = () => {\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [published, setPublished] = useState('false');\n  const [image, setImage] = useState('');\n  const [errors, setErrors] = useState([]);\n  const history = useHistory();\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const url = `https://vincephung-blog.glitch.me/api/posts`;\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: AuthenticateUser(),\n        },\n        mode: 'cors',\n        body: JSON.stringify({ title, content, published, image }),\n      });\n      const data = await response.json();\n      console.log(response);\n      //handle errors\n      if (response.status === 400) {\n        setErrors(data);\n        return;\n      }\n      //successful post\n      history.push('/home');\n    } catch (error) {\n      console.log(error);\n      setErrors([{ msg: 'User not authenticated, please log in to post' }]);\n    }\n  };\n\n  const handleCheck = (e) => {\n    setPublished(!published);\n  };\n\n  return (\n    <div className=\"postFormContainer\">\n      <form className=\"postForm\" onSubmit={handleSubmit}>\n        <div>\n          {errors.map((err) => (\n            <li key={err.msg}>{err.msg}</li>\n          ))}\n        </div>\n        <label htmlFor=\"title\">Title:</label>\n        <input\n          name=\"title\"\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n        <label htmlFor=\"content\">Post Content:</label>\n        <textarea\n          rows=\"3\"\n          name=\"content\"\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          required\n        ></textarea>\n        <label htmlFor=\"published\">Published? </label>\n        <input\n          name=\"published\"\n          type=\"checkbox\"\n          checked={published === true ? true : false}\n          onChange={handleCheck}\n        />\n        <label htmlFor=\"image\">Image URL:</label>\n        <input\n          name=\"image\"\n          type=\"url\"\n          value={image}\n          onChange={(e) => setImage(e.target.value)}\n        />\n\n        <button className=\"submitForm\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default PostForm;\n","import React, { useState } from 'react';\nimport AuthenticateUser from '../../authentication/AuthenticateUser';\nimport { useHistory } from 'react-router-dom';\nimport moment from 'moment';\nimport './form.css';\n\nconst EditPostForm = ({ match, location }) => {\n  const [title, setTitle] = useState(location.state.title || '');\n  const [content, setContent] = useState(location.state.content || '');\n  const [published, setPublished] = useState(\n    location.state.published || 'false'\n  );\n  const [image, setImage] = useState(location.state.image || '');\n  const [errors, setErrors] = useState([]);\n  const history = useHistory();\n\n  //try catch\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      let lastUpdate = moment().format('MMMM Do[,] YYYY');\n      const url = `https://vincephung-blog.glitch.me/api/posts/${match.params.id}`;\n      const response = await fetch(url, {\n        mode: 'cors',\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: AuthenticateUser(),\n        },\n        body: JSON.stringify({ title, content, published, image, lastUpdate }),\n      });\n      const data = await response.json();\n\n      //handle errors\n      if (response.status === 400) {\n        setErrors(data);\n        return;\n      }\n      //successful post\n      history.push('/home');\n    } catch (error) {\n      console.log(error);\n      setErrors([{ msg: 'User not authenticated, please log in to edit' }]);\n    }\n  };\n\n  const handleCheck = (e) => {\n    setPublished(!published);\n  };\n\n  const handleDelete = async (e) => {\n    e.preventDefault();\n    try {\n      let lastUpdate = moment().format('MMMM Do[,] YYYY');\n      const url = `https://vincephung-blog.glitch.me/api/posts/${match.params.id}`;\n      const response = await fetch(url, {\n        mode: 'cors',\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: AuthenticateUser(),\n        },\n        body: JSON.stringify({ title, content, published, image, lastUpdate }),\n      });\n      const data = await response.json();\n\n      //successful post\n      history.push('/home');\n    } catch (error) {\n      console.log(error);\n      setErrors([{ msg: 'User not authenticated, please log in to edit' }]);\n    }\n  };\n\n  return (\n    <div className=\"EditPostFormContainer\">\n      <form className=\"EditPostForm\" onSubmit={handleSubmit}>\n        <h1>Edit form </h1>\n        <div>\n          {errors.map((err) => (\n            <li key={err.msg}>{err.msg}</li>\n          ))}\n        </div>\n        <label htmlFor=\"title\">Title:</label>\n        <input\n          name=\"title\"\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n        <label htmlFor=\"content\">Post Content:</label>\n        <textarea\n          rows=\"3\"\n          name=\"content\"\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          required\n        ></textarea>\n        <label htmlFor=\"published\">\n          Published?\n          <input\n            name=\"published\"\n            type=\"checkbox\"\n            checked={published === true ? true : false}\n            onChange={handleCheck}\n          />\n        </label>\n        <label htmlFor=\"image\">Image URL:</label>\n        <input\n          name=\"image\"\n          type=\"url\"\n          value={image}\n          onChange={(e) => setImage(e.target.value)}\n        />\n        <button className=\"deleteBtn\" onClick={handleDelete} type=\"submit\">\n          Delete\n        </button>\n        <button className=\"submitForm\" type=\"submit\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default EditPostForm;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AuthenticateUser from '../../authentication/AuthenticateUser';\nimport './post.css';\n\nconst PostDisplay = (props) => {\n  //const [published, setPublished] = useState();\n  const history = useHistory();\n\n  const showComments = (e) => {\n    e.preventDefault();\n    //once you get comments\n    history.push({\n      pathname: `/posts/${props._id}/comments`,\n    });\n  };\n\n  const editPost = async (e) => {\n    e.preventDefault();\n    const url = `https://vincephung-blog.glitch.me/api/posts/${props._id}`;\n    const response = await fetch(url, { mode: 'cors' });\n    const data = await response.json();\n    //get post data\n    const { title, content, published, image } = data;\n    history.push({\n      pathname: `/posts/${props._id}`,\n      state: { title, content, published, image },\n    });\n  };\n\n  const handlePublish = async (e) => {\n    e.preventDefault();\n    const url = `https://vincephung-blog.glitch.me/api/posts/${props._id}/publish`;\n    const response = await fetch(url, {\n      mode: 'cors',\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: AuthenticateUser(),\n      },\n      body: JSON.stringify({ published: !props.published }),\n    });\n    const data = await response.json();\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"postContainer\">\n      <div className=\"postSection\">\n        <h1 className=\"postTitle\">{props.title}</h1>\n        <hr />\n        <p className=\"postDate\">Posted on {props.timestamp}</p>\n        <hr />\n        <img className=\"postPicture\" src={props.image} alt=\"post img\"></img>\n        <hr />\n        <p className=\"postContent\">{props.postContent}</p>\n        <p className=\"postPublished\">Published : {String(props.published)}</p>\n        <hr />\n        <button className=\"showComments\" onClick={showComments}>\n          Show comments\n        </button>\n        <button className=\"publishPost\" onClick={handlePublish}>\n          Publish/Unpublish\n        </button>\n        <button className=\"editPost\" onClick={editPost}>\n          Edit Post\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default PostDisplay;\n","import React, { useState, useEffect } from 'react';\nimport PostDisplay from './PostDisplay';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nconst PostList = ({ user }) => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    const getPosts = async () => {\n      const url = `https://vincephung-blog.glitch.me/api/posts`;\n      const response = await fetch(url, { mode: 'cors' });\n      if (response.ok) {\n        const data = await response.json();\n        setPosts(data);\n      }\n    };\n    getPosts();\n  }, []);\n  return (\n    <div className=\"postListContainer\">\n      <div>\n        <Button variant=\"dark\">\n          <Link to=\"/posts\">Create new post</Link>\n        </Button>\n      </div>\n      {posts.map((post) => (\n        <PostDisplay\n          title={post.title}\n          published={post.published}\n          lastUpdate={post.lastUpdate}\n          image={post.image}\n          timestamp={post.timestamp}\n          key={post._id}\n          _id={post._id}\n          user={user}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default PostList;\n","import React from 'react';\n\nconst CommentDisplay = (props) => {\n  return (\n    <div className=\"comment\">\n      <h1>{props.author}</h1>\n      <p>{props.content}</p>\n      <p>{props.timestamp}</p>\n    </div>\n  );\n};\n\nexport default CommentDisplay;\n","import React, { useState, useEffect } from 'react';\nimport CommentDisplay from './CommentDisplay';\n\nconst Comments = ({ match }) => {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const getComments = async () => {\n      const url = `https://vincephung-blog.glitch.me/api/posts/${match.params.id}/comments`;\n      const response = await fetch(url, { mode: 'cors' });\n      if (response.ok) {\n        const data = await response.json();\n        setComments(data);\n      }\n    };\n    getComments();\n  }, [match.params.id]);\n  return (\n    <div className=\"commentContainer\">\n      {comments.map((comment) => (\n        <CommentDisplay\n          key={comment._id}\n          author={comment.author}\n          content={comment.content}\n          timestamp={comment.timestamp}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Comments;\n","const GetUser = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  //checks if user is logged in and gives them access to stuff\n  return user;\n};\n\nexport default GetUser;\n","const Logout = () => {\n  localStorage.removeItem('user');\n  window.location.reload();\n  return JSON.parse(localStorage.getItem('user'));\n};\n\nexport default Logout;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Button from 'react-bootstrap/Button';\n\nimport { Link } from 'react-router-dom';\nimport GetUser from './authentication/GetUser';\nimport Logout from './authentication/Logout';\n\nconst Nav = () => {\n  const user = GetUser();\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\">\n      <Navbar.Brand>\n        <Link to=\"/home\">Blog Home</Link>\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className=\"justify-content-end\">\n        {user ? (\n          <div>\n            <Navbar.Text>Signed in as: {user.username}</Navbar.Text>\n            <Button variant=\"dark\" onClick={Logout}>\n              <Link to=\"/home\">Sign out </Link>\n            </Button>\n          </div>\n        ) : (\n          <Button variant=\"dark\">\n            <Link to=\"/log-in\">Log in </Link>\n          </Button>\n        )}\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ErrorPage = () => {\n  return (\n    <div>\n      <h2>\n        This page does not exist.\n        <Link to=\"/home\">Click this to go back to the homepage.</Link>\n      </h2>\n    </div>\n  );\n};\n\nexport default ErrorPage;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport LoginForm from './components/log-in-form/LoginForm';\nimport PostForm from './components/postForm/PostForm';\nimport EditPostForm from './components/postForm/EditPostForm';\nimport PostList from './components/postList/PostList';\nimport Comments from './components/comments/Comments';\nimport Nav from './Nav';\nimport Error from './Error';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router basename=\"/blog-frontend-admin\">\n      <Nav />\n      <Switch>\n        <Route exact path=\"/home\" component={PostList} />\n        <Route exact path=\"/log-in\" component={LoginForm} />\n        <Route exact path=\"/posts\" component={PostForm} />\n        <Route exact path=\"/posts/:id/\" component={EditPostForm} />\n        <Route exact path=\"/posts/:id/comments\" component={Comments} />\n        <Route path=\"/\" component={Error} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}